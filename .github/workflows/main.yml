# Name of the GitHub Actions workflow
name: Build, Scan, Push, and Deploy to AKS

# Controls when the action will run. 
on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

# --- Grant permissions for CodeQL results and ID token ---
permissions:
  actions: read
  contents: read
  security-events: write 
  id-token: write # Required for Kubernetes secret creation

env:
  ACR_NAME: 'ACRLFS' # Your existing ACR name
  # Add resource group and AKS cluster names if needed for K8s context
  RESOURCE_GROUP: 'LFS' 
  AKS_CLUSTER_NAME: 'aks-finder-app' # MAKE SURE this matches the name in your terraform/variables.tf

jobs:
  build-scan-and-push:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checks out your repository code
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4 

    # --- Initialize CodeQL ---
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python 

    # --- Build step required by CodeQL ---
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9' 
    - name: Install dependencies for CodeQL analysis
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # --- Perform CodeQL Analysis ---
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    # --- Existing Steps ---
    # Step 2: Logs into your Azure account
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Step 3: Logs into your private Azure Container Registry (ACR).
    - name: 'Login to Azure Container Registry'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    # Step 4: Builds the Docker image and pushes it to ACR.
    - name: Build and Push Docker image to ACR
      run: |
        docker build . -t ${{ env.ACR_NAME }}.azurecr.io/finder-app:${{ github.run_number }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/finder-app:${{ github.run_number }}

    # Step 5: (Optional) Logout from ACR
    - name: Logout from Azure Container Registry
      run: docker logout ${{ env.ACR_NAME }}.azurecr.io
      
    # --- NEW: Set K8s context ---
    # Connects the workflow runner to your AKS cluster
    - name: Set K8s context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.AKS_CLUSTER_NAME }}
        
    # --- NEW: Create Kubernetes Secret for Application Insights ---
    # This takes the connection string from GitHub Secrets and stores it securely in K8s
    - name: Create K8s Secret for App Insights
      uses: azure/k8s-create-secret@v4 # Use v4 or latest
      with:
        namespace: default # Or your target namespace
        secret-name: appinsights-secret
        # The key name within the K8s secret will be 'connection-string'
        literal-values: connection-string=${{ secrets.APPINSIGHTS_CONNECTION_STRING }} 
      # Note: This step implicitly uses the K8s context set above.
